//
//  Untitled.swift
//  Design_Me_For_Fun
//
//  Created by Akshay Kumar on 22/01/25.
//
/*
Singleton Pattern Definition:

The Singleton Pattern ensures that a class has only one instance while providing a global access point to it.

Key Characteristics:

A private initializer prevents the direct instantiation of the class. A static instance variable holds the single instance. A global access method provides the instance.

Use Cases

Logging: Maintaining a single logger instance across the application. Database Connection: To ensure only one connection pool is created. Shared Resources: For global configurations, caches, or settings. Thread-Safe Operations: Centralized instance to prevent race conditions.

Advantages

Controlled Access: Ensures only one instance exists globally. Reduced Memory Usage: Avoids creating multiple instances of a resource-heavy object. Global Point of Access: Simplifies sharing data or resources. Lazy Initialization: The instance is created only when accessed, optimizing performance.

Disadvantages

Global State: Overusing singletons can lead to tightly coupled code and global dependencies.
            Difficult to Test: Hard to mock or replace singletons during unit testing, leading to brittle tests. Concurrency Issues: If not implemented carefully, thread-safety problems may arise. Hidden Dependencies: Makes dependencies less obvious, affecting code readability and maintainability.
*/

/* Factory Desing Pattern
The Factory Pattern is a Creational Design Pattern that provides an interface for creating objects in a super class but allows subclasses to alter the type of objects that will be created.

It abstracts the instantiation logic, making it easier to manage and scale object creation in your application.

Key Characteristics:

Promotes loose coupling by delegating the responsibility of object creation to a factory class or method.

Useful when you have a common interface or superclass and want to decide the exact class to instantiate at runtime.

 */
